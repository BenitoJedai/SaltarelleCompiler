<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />

	<UsingTask AssemblyFile="SCTask.dll" TaskName="SCTask"/>
	<UsingTask AssemblyFile="SCTask.dll" TaskName="MakeSourceArchive"/>

	<PropertyGroup Condition="'$(GenerateSourceMap)' != 'false' And ('$(GenerateSourceMap)' == 'true' Or '$(DebugType)'=='pdbonly' Or '$(DebugType)'=='full')">
		<DoGenerateSourceMap>true</DoGenerateSourceMap>
	</PropertyGroup>

	<ItemGroup>
		<IntermediateScript Include="$(IntermediateOutputPath)$(TargetName).js" Condition="'@(IntermediateScript)'==''"/>
		<IntermediateSourceMap Include="$(IntermediateOutputPath)$(TargetName).map" Condition="'$(DoGenerateSourceMap)' == 'true'"/>
	</ItemGroup>

	<Target Name="AfterCompile" DependsOnTargets="CoreCompile"
          Inputs="$(MSBuildAllProjects);
                $(AssemblyOriginatorKeyFile);
                @(Compile);
                @(ReferencePath);
                @(EmbeddedResource);
                @(CustomAdditionalCompileInputs)"
          Outputs="@(DocFileItem);
                   @(IntermediateScript);
                   @(IntermediateAssembly);
                   @(IntermediateSourceMap);
                   @(CustomAdditionalCompileOutputs)"
          Returns="">
		<ItemGroup>
			<CompileWithRelativePaths Include="@(Compile)">
				<RelativePath>$([MSBuild]::ValueOrDefault('%(Compile.Link)', '%(Identity)'))</RelativePath>
			</CompileWithRelativePaths>
		</ItemGroup>
		<PropertyGroup>
			<EmitDebugScript>false</EmitDebugScript>
		</PropertyGroup>
		<PropertyGroup Condition="'$(DebugType)'=='full'">
			<EmitDebugScript>true</EmitDebugScript>
		</PropertyGroup>
		<PropertyGroup Condition="'$(AlreadyCompiled)'==''">
			<AlreadyCompiled>true</AlreadyCompiled>
		</PropertyGroup>

		<SCTask AdditionalLibPaths="$(AdditionalLibPaths)"
		        DefineConstants="$(DefineConstants)"
		        DisabledWarnings="$(NoWarn)"
		        DocumentationFile="@(DocFileItem)"
		        EmitDebugInformation="$(EmitDebugScript)"
		        KeyContainer="$(KeyContainerName)"
		        KeyFile="$(KeyOriginatorFile)"
		        OutputAssembly="@(IntermediateAssembly)"
		        OutputScript="@(IntermediateScript)"
		        OutputSourceMap="@(IntermediateSourceMap)"
		        References="@(ReferencePath);@(ReferenceDependencyPaths)"
		        Resources="@(EmbeddedResource)"
		        Sources="@(CompileWithRelativePaths)"
		        TreatWarningsAsErrors="$(TreatWarningsAsErrors)"
		        WarningLevel="$(WarningLevel)"
		        WarningsAsErrors="$(WarningsAsErrors)"
		        WarningsNotAsErrors="$(WarningsNotAsErrors)"
		        MainEntryPoint="$(StartupObject)"
		        TargetType="$(OutputType)"
		        AlreadyCompiled="$(AlreadyCompiled)"
		        Plugins="$(SaltarellePlugins)"
		        />
	</Target>

	<Target Name="CopyFilesToOutputDirectory"
	        DependsOnTargets="
	             ComputeIntermediateSatelliteAssemblies;
	             _CopyFilesMarkedCopyLocal;
	             _CopySourceItemsToOutputDirectory;
	             _CopyAppConfigFile;
	             _CopyManifestFiles;
	             _CheckForCompileOutputs;
	             _SGenCheckForOutputs">
	
		<PropertyGroup>
			<!-- By default we're not using Hard Links to copy to the output directory, and never when building in VS -->
			<CreateHardLinksForCopyFilesToOutputDirectoryIfPossible Condition="'$(BuildingInsideVisualStudio)' == 'true' or '$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)' == ''">false</CreateHardLinksForCopyFilesToOutputDirectoryIfPossible>
		</PropertyGroup>
	
		<PropertyGroup>
			<CopyBuildOutputToOutputDirectory Condition="'$(CopyBuildOutputToOutputDirectory)'==''">true</CopyBuildOutputToOutputDirectory>
			<CopyOutputSymbolsToOutputDirectory Condition="'$(CopyOutputSymbolsToOutputDirectory)'==''">true</CopyOutputSymbolsToOutputDirectory>
		</PropertyGroup>
	
		<!-- Copy the build product (.dll or .exe). -->
		<Copy SourceFiles="@(IntermediateAssembly)"
		      DestinationFolder="$(OutDir)"
		      SkipUnchangedFiles="$(SkipCopyUnchangedFiles)"
		      OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
		      Retries="$(CopyRetryCount)"
		      RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
		      UseHardlinksIfPossible="$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)"
		      Condition="'$(CopyBuildOutputToOutputDirectory)' == 'true' and '$(SkipCopyBuildProduct)' != 'true'"
		      >
	
			<Output TaskParameter="DestinationFiles" ItemName="MainAssembly"/>
			<Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>
	
		</Copy>
	
		<!-- Copy the additional modules. -->
		<Copy SourceFiles="@(AddModules)"
		      DestinationFolder="$(OutDir)"
		      SkipUnchangedFiles="$(SkipCopyUnchangedFiles)"
		      OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
		      Retries="$(CopyRetryCount)"
		      RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
		      UseHardlinksIfPossible="$(CreateHardLinksForCopyAdditionalFilesIfPossible)"
		      Condition="'@(AddModules)' != ''"
	          >

			<Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>

		</Copy>

		<!-- Copy the debug information file (.pdb), if any -->
		<Copy SourceFiles="@(_DebugSymbolsIntermediatePath)"
		      DestinationFiles="@(_DebugSymbolsOutputPath)"
		      SkipUnchangedFiles="$(SkipCopyUnchangedFiles)"
		      OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
		      Retries="$(CopyRetryCount)"
		      RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
		      UseHardlinksIfPossible="$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)"
		      Condition="'$(_DebugSymbolsProduced)'=='true' and '$(SkipCopyingSymbolsToOutputDirectory)' != 'true' and '$(CopyOutputSymbolsToOutputDirectory)'=='true'"
		      >

			<Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>

		</Copy>

		<!-- Copy the generated script. -->
		<Copy SourceFiles="@(IntermediateScript)"
		      DestinationFolder="$(OutDir)"
		      SkipUnchangedFiles="$(SkipCopyUnchangedFiles)"
		      OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
		      Retries="$(CopyRetryCount)"
		      RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
		      UseHardlinksIfPossible="$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)"
		      Condition="'$(CopyBuildOutputToOutputDirectory)' == 'true' and '$(SkipCopyBuildProduct)' != 'true'"
		      >
		
			<Output TaskParameter="DestinationFiles" ItemName="MainScript"/>
			<Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>
		</Copy>

		<!-- Copy the generated source map. -->
		<Copy SourceFiles="@(IntermediateSourceMap)"
		      DestinationFolder="$(OutDir)"
		      SkipUnchangedFiles="$(SkipCopyUnchangedFiles)"
		      OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
		      Retries="$(CopyRetryCount)"
		      RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
		      UseHardlinksIfPossible="$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)"
		      Condition="'$(CopyBuildOutputToOutputDirectory)' == 'true' and '$(SkipCopyBuildProduct)' != 'true' and '@(IntermediateSourceMap)' != ''"
		      >

			<Output TaskParameter="DestinationFiles" ItemName="SourceMap"/>
			<Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>
		</Copy>

		<Message Importance="High" Text="$(MSBuildProjectName) -&gt; @(MainAssembly->'%(FullPath)')" Condition="'$(SkipCopyBuildProduct)'!='true'" />

		<!-- Copy the resulting XML documentation file, if any. -->
		<Copy SourceFiles="@(DocFileItem)"
		      DestinationFiles="@(FinalDocFile)"
		      SkipUnchangedFiles="$(SkipCopyUnchangedFiles)"
		      OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
		      Retries="$(CopyRetryCount)"
		      RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
		      UseHardlinksIfPossible="$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)"
		      Condition="'$(_DocumentationFileProduced)'=='true'">

			<Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>

		</Copy>

		<MakeSourceArchive SourceFiles="@(CompileWithRelativePaths)"
		                   MapFile="@(IntermediateSourceMap)"
		                   Destination="$(OutDir)$(TargetName).map.zip"
		                   Condition="'@(IntermediateSourceMap)'!=''">
			<Output TaskParameter="OutputFile" ItemName="FileWrites"/>
		</MakeSourceArchive>
	</Target>
</Project>
